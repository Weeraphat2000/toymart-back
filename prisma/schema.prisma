// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          Role
  isActive      Boolean        @default(true) @map("is_active")
  userSubscribe UserSubscribe?
  userAddresses UserAddress[]
  reward        Reward?
  userProfile   UserProfile?
  liveChat      LiveChat[]
  watchLists    WatchList[]
  carts         Cart?
  transactions  Transaction[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model UserSubscribe {
  id          Int     @id @default(autoincrement())
  isSubscribe Boolean @default(false) @map("is_subscribe")
  userId      Int     @unique @map("user_id")
  user        User    @relation(fields: [userId], references: [id])

  @@map("user_subscribes")
}

model Reward {
  id     Int  @id @default(autoincrement())
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])
  point  Int  @default(50)

  @@map("rewards")
}

model UserAddress {
  id             Int     @id @default(autoincrement())
  firstName      String  @map("first_name") @db.VarChar(30)
  lastName       String  @map("last_name") @db.VarChar(30)
  phone          String  @db.VarChar(10)
  cityVillage    String  @map("city_village")
  apartmentSuite String? @map("apartment_suite")
  province       String
  zipCode        String  @map("zip_code") @db.VarChar(10)
  other          String
  setDefault     Boolean @default(true) @map("set_default")
  user           User    @relation(fields: [userId], references: [id])
  userId         Int     @map("user_id")

  @@map("user_addresses")
}

model UserProfile {
  id        Int       @id @default(autoincrement())
  nickName  String?   @map("nick_name") @db.VarChar(30)
  phone     String?   @db.VarChar(10)
  birthDate DateTime? @map("birth_date") @db.Date
  gender    Gender?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique @map("user_id")

  @@map("user_profiles")
}

enum Gender {
  MALE
  FEMALE
  AFAB
  AMAB
  UNSPECIFIED
}

model LiveChat {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  role      Role
  userName  String   @map("user_name")
  message   String
  time      String
  date      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("live_chats")
}

model ProductSeries {
  id       Int        @id @default(autoincrement())
  series   String     @unique
  products Products[]

  @@map("product_series")
}

model ProductGroup {
  id         Int        @id @default(autoincrement())
  group      Group
  categories String     @unique
  products   Products[]

  @@map("product_group")
}

enum Group {
  MEGA
  TYPE
  ACCESSORY
}

model Products {
  id             Int              @id @default(autoincrement())
  serieId        Int              @map("serie_id")
  productSeries  ProductSeries    @relation(fields: [serieId], references: [id])
  groupId        Int              @map("group_id")
  productGroup   ProductGroup     @relation(fields: [groupId], references: [id])
  productName    String           @unique @map("product_name")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  launchDate     DateTime         @map("launch_date") @db.Date
  price          Decimal          @db.Decimal(10, 2)
  stockQuantity  Int              @map("stock_quantity")
  isNew          Boolean          @default(true) @map("is_new")
  isHot          Boolean          @default(false) @map("is_hot")
  isSoldOut      Boolean          @default(false) @map("is_sold_out")
  isActive       Boolean          @default(true) @map("is_active")
  brand          String?
  size           String?
  material       String?
  customDetail   String?          @map("custom_detail")
  watchList      WatchList[]
  productImages  ProductImages[]
  productPosters ProductPosters[]
  cartItems      CartItems[]
  itemPayments   ItemPayment[]
  productCover   ProductCover[]
  lendingImage   LandingImage[]

  @@map("products")
}

model WatchList {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  productId Int      @map("product_id")
  products  Products @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("watch_lists")
}

model ProductCover {
  id        Int       @id @default(autoincrement())
  cover     String?
  products  Products? @relation(fields: [productId], references: [id])
  productId Int       @map("product_id")

  @@map("product_cover")
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  images    String?
  productId Int      @map("product_id")
  products  Products @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductPosters {
  id        Int      @id @default(autoincrement())
  posters1  String?
  posters2  String?
  posters3  String?
  posters4  String?
  posters5  String?
  productId Int      @unique @map("product_id")
  products  Products @relation(fields: [productId], references: [id])

  @@map("product_posters")
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  cartItems CartItems[]

  @@map("carts")
}

model CartItems {
  id        Int      @id @default(autoincrement())
  cartId    Int      @map("cart_id")
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int      @map("product_id")
  products  Products @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  @@map("cart_items")
}

model ItemPayment {
  id            Int           @id @default(autoincrement())
  quantity      Int
  price         Decimal       @db.Decimal(10, 2)
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  payStatus     PaymentStatus @default(PENDING)
  transactionId Int           @map("transaction_id")
  products      Products      @relation(fields: [productId], references: [id])
  productId     Int           @map("product_id")

  @@map("item_payments")
}

enum PaymentStatus {
  PENDING
  COMPLETE
  FAIL
}

model Transaction {
  id           Int               @id @default(autoincrement())
  userId       Int               @map("user_id")
  user         User              @relation(fields: [userId], references: [id])
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  paymentedAt  DateTime?         @map("paymented_at") @db.Timestamp(0)
  totalAmount  Decimal           @map("total_amount") @db.Decimal(10, 2)
  discount     Decimal           @default(0) @db.Decimal(10, 2)
  billNumber   String            @unique @map("bill_number")
  status       TransactionStatus @default(PENDING)
  itemPayments ItemPayment[]

  @@map("transactions")
}

model LandingImage {
  id        Int      @id @default(autoincrement())
  image     String?
  products  Products @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")

  @@map("landing_image")
}

enum TransactionStatus {
  PENDING
  COMPLETE
  FAIL
}
